class disjoint_set {
    private:
        vector<int> parent;
        vector<int> rank;
    public:
        disjoint_set(int size){
            parent = vector<int>(size+1, 0);
            rank = vector<int> (size+1, 0);
            
            for(int i=1;i <= size;i++){
                parent[i]=i;
            }
        }
    
        //find out the root of the tree
        int find(int a){
            if(parent[a] == a)
                return a;
            
            parent[a] = find(parent[a]);
        
            return parent[a];
        }
    
        //combine two set together
        bool Union(int a, int b){
            int root_a= find(a);
            int root_b= find(b);
            
            if(root_a == root_b)
                return false;
            
            else if(rank[root_a] < rank[root_b])
                parent[root_a]=root_b;
            else if(rank[root_a] > rank[root_b])
                parent[root_b] = root_a;
            else{
                parent[root_b] = root_a;
                rank[root_a] +=1;
            }
            return true;
        }
};

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        disjoint_set s(edges.size());
        
        for(const auto edge: edges){
            if(!s.Union(edge[0], edge[1]))
                return edge;
        }
        return {};
    }
};
