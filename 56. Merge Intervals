/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    struct compInterval {
         bool operator()(const Interval i, const Interval j) const {
            return i.start < j.start ;
        }
    };
    
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> results;
        
       
        /*sort the vector */
        sort(intervals.begin(), intervals.end(), compInterval());

        /*compare current element with the element in the end of results*/
        for(int i=0;i<intervals.size();i++){
            if(results.empty() || intervals[i].start  >  results.back().end)
                results.push_back(intervals[i]);                 
            else
                 results.back().end =max( intervals[i].end, results.back().end);  
        }
         
        return results;
    }
