class Solution {
public:
    int calculateMaxArea(vector<int> heights)
    {
        stack<int> s;
        int maxArea=0;
        int i=0;
        
        while( i< heights.size()){
            if(s.empty() || heights[i] >= heights[s.top()])
                    s.push(i++);
            else{
                int top=s.top();
                s.pop();
                
                int area=heights[top] * (s.empty()? i:(i-s.top()-1));
                if(area > maxArea)
                    maxArea=area;
            }
        }
        while(s.empty()==false){
                int top=s.top();
                s.pop();
                
                int area=heights[top] * (s.empty()? i:(i-s.top()-1));
                if(area > maxArea)
                    maxArea=area;
                
            }
        return maxArea;        
    } 
        
    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.size()<=0 || matrix[0].size()<=0) return 0;  
        
        int maxVal =0;
        int row=matrix.size();
        int col=matrix[0].size();
        
        vector<int> heights(col, 0);

        
        for(int i=0;i< row;i++)
        {
            for(int j=0;j<col;j++){
            if (matrix[i][j]=='1') 
                  heights[j] =heights[j] + 1;
            else
                heights[j]=0;
            }
           int  ret = calculateMaxArea(heights);
            if(ret >maxVal )
                maxVal = ret;
            
        }
        
        return maxVal;
    }
};
