class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        unordered_map<int, vector<pair<int, int>>> gra;
        
        for(auto &p : flights)
            gra[p[0]].emplace_back(p[1],p[2]);
        
        //from the src to current node, the total cost
        queue<pair<int, int>> q;
        vector<int> visited;
        
        q.push({src, 0});
        int step =0;
        int ret=INT_MAX;
        
        while(!q.empty()){
            int size = q.size();            
            
            //check level by level
            while(size--){
                //child
                int cur = q.front().first;
                
                //cost
                int cost = q.front().second;
                
                if(cur == dst){
                    ret = min(ret, cost);
                }
                q.pop();
                for(auto &child: gra[cur]) {
                    if(cost + child.second >= ret)
                        continue;
                    q.push({child.first, cost+child.second});
                }
            }
             if(step++ > K) break;
        }
        
        return ret==INT_MAX? -1: ret;
    }
};
