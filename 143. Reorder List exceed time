# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        
        if( head==None or head.next==None) :
            return
        #find the middle node
        slow=fast=head
        mid=None
    
        while (fast!=None and fast.next!=None):
            mid=slow
            fast=fast.next.next
            slow=slow.next
        #break list to two part.
        head2=mid.next
        mid.next=None
        
        #reverse the l2
        dummy = ListNode(0)
        dummy.next = head2
        
        prev = dummy.next
        cur = prev.next
        while(cur!=None):
            prev.next=cur.next
            cur.next = prev
            dummy.next=cur
            cur = prev.next
        
        #combine
        cur=head
        while(cur!= None or head2!=None):
            cur.next=head2
            head2.next=cur.next
            cur=cur.next
            head2=head2.next
            
        return head
