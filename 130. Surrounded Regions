class Solution {
public:
    void dfs(int i, int j, vector<vector<char>>& board){
        if(i<0 || i>=board.size() || j <0 || j>=board[0].size() || board[i][j]!='O')
            return;
        
        board[i][j]='Y';
        dfs(i+1,j,board);
        dfs(i-1,j,board);
        dfs(i,j+1,board);
        dfs(i,j-1,board);
        
        return;
    }
    
    void solve(vector<vector<char>>& board) {        
        if(board.empty() || board.size()==0 || board[0].size() ==0)
            return;
        // DFS to do this issue.
        // 1st, checking the margin. If there have one O in ther margin, and the O which is connect with the O in the margin. 
        //we know that need to be keeped.  Then we can mark it as 1 or other charager except X or O. 
        // Finally, we can go through all the element. if the element is 1, which means the element is linked to the margin. 
        int row = board.size();
        int col = board[0].size();
        
        for(int i=0;i< row;i++){
            if(board[i][0] =='O')
                dfs(i,0, board);
            if(board[i][col-1]=='O')
                dfs(i, col-1, board);
        }
        
        for(int j=0;j<col;j++){
            if(board[0][j] == 'O')
                dfs(0, j, board);
            if(board[row-1][j]=='O')
                dfs(row-1, j, board);
        }
        
        for(int i=0;i< row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='Y')
                    board[i][j]='O';
            }
        }
        return ;
    }
};
