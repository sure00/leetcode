class RandomizedSet {
private:
        map<int, int> Map;
        vector<int> arr;        

public:
    /** Initialize your data structure here. */
    RandomizedSet() {

    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        #already exist this element, so return false
        if(Map.find(val) !=Map.end())
                return false;
        arr.push_back(val);
        Map.insert(std::pair<int,int>(val, arr.size()-1)); 
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        #not exist the value. return false.
        if(Map.find(val) == Map.end() )
            return false;
        
        #erase index in map
        int last = arr.back();
        int index = Map[val];
        
        Map[last]=Map[val];
                
        swap(arr[index], last);
        
        arr.pop_back();
   
        Map.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return arr[rand() % arr.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
