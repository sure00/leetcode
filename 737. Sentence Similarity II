class disjoint_set {
private: 
    vector<int> parent;
    vector<int> rank;
    
public:
    disjoint_set(int n){
        parent=vector<int>(n,0);
        rank = vector<int>(n,0);
        
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
    }
    
    int find(int a){
        if(parent[a]!=a)
            parent[a]=find(parent[a]);
        return parent[a];
    }
    
    bool Union(int a , int b){
        int root_a = find(a);
        int root_b = find(b);
        
        if(root_a == root_b)
            return false;
        if(rank[root_a] < rank[root_b])
            parent[root_a] = root_b;
        else if(rank[root_a] > rank[root_b])
            parent[root_b] = root_a;
        else{
            parent[root_b] = root_a;
            rank[root_a]++;
        }
        return true;
    }
};


class Solution { 
private:
        int get_index(string word, unordered_map<string, int> &map, bool create=false){
        auto it= map.find(word);
        if(it == map.end()){
            if(create==false)
                return INT_MIN;
            int index = map.size();
            map.emplace(word, index);
            return index;
        }
        return it->second;        
    }
public:

    
    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<pair<string, string>> pairs) {
        if(words1.size() != words2.size())
            return false;
        
        disjoint_set s(2*pairs.size());
        unordered_map<string, int> map;
        
        for(const auto pair: pairs){
            s.Union(get_index(pair.first, map, true), get_index(pair.second, map, true));
        }
                    
        for(int i=0;i< words1.size();i++){
            // for the case that words1 is same as words2
            if(words1[i] == words2[i])
                continue;
            
            int index_words1 = get_index(words1[i], map);
            int index_words2 = get_index(words2[i], map);
            
            //element do not exist in the pair and seems it do not have any similiar words.
            if(index_words1<0 || index_words2<0)
                return false;
            
            int root_a = s.find(index_words1);
            int root_b = s.find(index_words2);
            
            if(root_a != root_b)
                return false;
        }
        return true;
    }
};
